type Query {
  listBusinessEntities: [BusinessEntity!]!
  businessEntity(businessEntityId: String!): BusinessEntity!
  listGames: [Game!]!
  game(gameId: String!): Game!
  isNameAvailable(type: String!, name: String!): Boolean!
  getAutocompleteSuggestions(type: String!, query: String!): [NameIdPair!]!
  getAuthenticatedUser: CurrentUser!
  me: User!
  listPlatforms: [Platform!]!
  platform(platformId: String!): Platform!
  getRelease(id: String!): Release!
  testEntity(id: String!): TestEntity!
  anotherTestEntity: TestEntity!
}

type BusinessEntity {
  id: String!
  name: String!
}

type Game {
  id: String!
  name: String!
  sortName: String!
  releases: [Release!]!
}

type Release {
  id: String!
  specifier: String!
  releaseDate: DateTime
  platform: Platform!
  basedOn: Release
  leadTo: [Release!]!
  businessEntities: [ReleaseRelatedBusinessEntity!]!
  ownership: GameOwnership!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Platform {
  id: String!
  name: String!
}

type ReleaseRelatedBusinessEntity {
  id: String!
  roleDescription: String!
  role: ReleaseEntityRole!
  businessEntity: BusinessEntity!
}

enum ReleaseEntityRole {
  Developer
  Publisher
}

type GameOwnership {
  id: String!
  ownershipType: OwnershipType!
  isNew: Boolean
}

enum OwnershipType {
  None
  Owned
  Access
  Wishlisted
}

type NameIdPair {
  id: String!
  name: String!
}

type CurrentUser {
  user: User
}

type User {
  id: String!
  username: String!
  role: String!
}

type TestEntity {
  id: String!
}

type Mutation {
  login(password: String!, username: String!): AuthResponse!
  createAccount(password: String!, username: String!): AuthResponse!
  createBusinessEntity(name: String!): BusinessEntity!
  updateOwnership(ownershipId: String, ownershipType: OwnershipType!, releaseId: String!): Release!
  createGame(name: String!): Game!
  updateGame(data: GameUpdate!, id: String!): Game!
  deleteEntity(id: String!, type: String!): DeletedIdContainer!
  createPlatform(name: String!): Platform!
  createReleases(data: CreateRelease!): Game!
}

type AuthResponse {
  success: Boolean!
  errorMessage: String
}

input GameUpdate {
  name: String!
  sortName: String!
}

type DeletedIdContainer {
  id: String!
}

input CreateRelease {
  gameId: String!
  developer: String
  publisher: String
  platforms: [String!]!
  specifier: String!
  releaseDate: DateTime
}
